# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

resources:
  containers:
  - container: postgres
    image: postgres:11
  - container: mysql
    image: mysql:5.7

pool:
  vmImage: 'ubuntu-latest'

services:
  postgres: postgres
  mysql: mysql

strategy:
  matrix:
    Python36-Pandas023:
      python.version: '3.6'
      pandas.version: '0.23.4'
      GE_pytest_pip_opts: '-r requirements-dev-minimal.txt'
      GE_pytest_opts: '--no-sqlalchemy --no-spark'
    Python37-Pandas025:
      python.version: '3.7'
      pandas.version: '0.25.3'
      GE_pytest_pip_opts: '-r requirements-dev-minimal.txt'
      GE_pytest_opts: '--no-sqlalchemy --no-spark'
    Python38-PandasLatest:
      python.version: '3.8'
      pandas.version: 'latest'
      GE_pytest_pip_opts: '-r requirements-dev-minimal.txt'
      GE_pytest_opts: '--no-sqlalchemy --no-spark'
    Python37-FullSuite:
      python.version: '3.7'
      pandas.version: 'latest'
      GE_pytest_pip_opts: '-r requirements-dev-minimal.txt -r requirements-dev-sqlalchemy.txt -r requirements-dev-spark.txt'
      GE_pytest_opts: ''

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'
- bash: python -m pip install --upgrade pip
  displayName: 'Update pip'
- bash: pip install pandas
  condition: eq(variables['pandas.version'], 'latest')
  displayName: 'Install pandas latest'
- bash: pip install pandas==$(pandas.version)
  condition: ne(variables['pandas.version'], 'latest')
  displayName: 'Install pandas - $(pandas.version)'

- script: |
    pip install -r requirements.txt
    pip install $(GE_pytest_pip_opts)
    # Consider fragmenting *all* integration tests into separate folder and run
    pip install .
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest $(GE_pytest_opts) --napoleon-docstrings
  displayName: 'pytest'

# - task: JavaToolInstaller@0
#   inputs:
#     versionSpec: "11"
#     jdkArchitectureOption: x64
#     jdkSourceOption: LocalDirectory
#     jdkFile: "/builds/openjdk-11.0.2_linux-x64_bin.tar.gz"
#     jdkDestinationDirectory: "/builds/binaries/externals"
#     cleanDestinationDirectory: true
